# This is a GitHub Actions workflow to build and test a Java project using Gradle.
# It is triggered by pushes to the master branch.

on:
  push:
    branches:
      - master # Change this to your main branch name

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the project's source code from the repository.
      - name: Checkout project sources
        uses: actions/checkout@v3


      # Step 2: Cache Gradle dependencies.
      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}


      # Step 3: Set up the Gradle build tool on the runner.
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu' # See 'Supported distributions' for available options
          java-version: '17'

      # Step 6: Check Java version
      - name: Check Java version
        run: java -version

      # Step 4: Run the Gradle build using the Gradle Wrapper.
      - name: Run build with Gradle Wrapper
        run: ./gradlew build

      # Step 5: Run tests using the Gradle Wrapper.
      - name: Run Test with Gradle Wrapper
        run: ./gradlew test


      # Step 6: Publish JUnit-style test reports, even if the previous steps fail.
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v4
        if: success() || failure() # always run even if the previous step fails
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'
